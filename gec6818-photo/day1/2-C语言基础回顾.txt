
一、数据类型
	8bit(位) == 1Byte(字节)
	printf("sizeof(int) = %d\n", sizeof(int)); // 屏幕输出int的大小

	0.0 基本类型
		整型：
			(signed) int 有符号整型  
				大小：4字节 ==> 32bit 
				==> 0000 0000 0000 0000 0000 0000 0000 0000  -2^31 ~ 2^31-1 
				符号位为1 -》负数
				符号位为0 -》正数
			unsigned int 无符号整型
				大小：4字节 ==> 32bit
				==> 0000 0000 0000 0000 0000 0000 0000 0000  0 ~ 2^32
			(signed) short			 大小：2字节
			...
			(signed) long			 大小：4/8字节
			...

		浮点型：
			float
			double
		字符型：
		(unsigned) char 大小1字节
		
		void型
	
	0.1 自定义类型(所占内存大小不确定)
		数组
			int array[10]; // 定义了长度为10个int大小的数组
		
		结构体
			struct stu {
				int age;
				int num;
				char name[32];
				//...
			};
		
		共用/联合体

		枚举

二、变量和常量
	变量：可以改变的量。
	变量的定义：
		数据类型 变量名;
		int kk;
	变量的初始化：
		数据类型 变量名 = 0;
		int cc = 0;
	变量的引用(赋值):
		cc = 4;
		printf("cc = %d\n", cc); // cc = 4

	注意：在C语言中 ”=“ 叫做赋值 ”==“才叫做等号

	常量：确定值的量。
		1、2、2.5、3.1415926...

	示例1：
		char zifu = 'K'; // 定义一个字符类型的变量
		zifu = 'C';
		printf("zifu = %c\n", zifu); // zidu = C
		printf("zifu = %d\n", zifu); // zidu = 67
		
		在本次项目中，我们更多是关注数据的大小，当我们想要存储1字节的数据时，
	就可以定义一个char类型的变量。

三、常用运算符和位操作符
	常用运算符：
		+、-、*、/
		=、==、<、>、<=、>=
		示例：
			int a;
			// 判断a是否在0-100之间
			0 <= a <=100 // 语法错误
			0<=a && a<=100 
		&& 		:与运算符，两者都为真，结果才为真
		|| 		:或运算符，两者都为假，结果才为假
		! 		:非运算符 取反
	位操作符：
		在使用位操作符时，我们通常把数据先转化成对应的二进制数来进行运算。
		| 		:位或 有真则为真
		&		:位于 有假则为假
		^		:异或
			示例2：
				把以下两个数变成0x0f;
				char num1 = 0x06; // 0000 0110
				char num2 = 0x09; // 0000 1001
				// 0x0f ==> 0000 1111
				unsigned char num3 = num1 | num2; // 0000 1111
		
		<<		:左移 最高数据位抛弃，最低数据位补0
		>>		:右移 最低数据位抛弃，最高数据位补0
			示例3：
				unsigned char num4 = 0xff; // 1111 1111
				num4 = num4 << 1;
				printf("num4 = %x\n", num4);  // 1111 1110

练习：把上面的示例自己动手验证一遍。


四、常用库函数
	格式化输入/输出：
	输出：
		printf("格式占位符", 变量名);
			变量		格式占位符
			int 		%d (十进制)
						%x (十六进制)
						%o (八进制)
			char		%c (字符)
			char[]		%s (字符串)
			
			\n	：换行
			\t	：一个制表(缩进)
			
		示例4：
			printf("hello world"); // 会在屏幕打印出 "hello world" 这一串字符
			int a = 100;
			printf("%d\n", a);
	
	输入：
		scanf("格式占位符", 地址); // 地址 <==> &变量名
		
		示例5：
			int b;
			scanf("%d", &b); // 键盘输入一个整数值，这个值存在b中
			int c, d, e;
			scanf("%d%d%d", &c, &d, &e); // 键盘依次输入三个整数，用空格或者回车隔开

五、分支/循环语句
	在C语言中，值为0表示假，值不为0表示真。

	分支：
		if() {}
			if(表达式语句)
			{
				// 你想做的事
			}
		当表达式语句为真时，就执行花括号里面的代码，为假就不执行。
		示例6：
			int li = 101;
			if( li >= 100 )
			{
				printf("rich man\n");
			}
			
		if() {}
		else {}
		示例7：
			int kk = 1000000;
			if(kk >= 100)
			{
				printf("rich man\n");
			}
			else 
			{
				printf("poor bro\n");
			}
		
		if() {}
		else if()
		{}
		示例8：
			常用于教学管理系统中的评级功能。
		
		...
		
		switch() {}
		
			switch() 
			{
				case 常量1:
					// you want to do
					break;
				case 常量2:
					// you want to do
					break;
				...
				default :
					// you want to do
					break;
			}
		
	循环：
		for() {}
		
			for( ; ; )
			{
				// 循环体语句
			}
		示例9：
			程序实现1-100的累加。
			int sum = 0;
			for(int i=1; i<=100; i++) // i++ <==> i = i+1
			{
				sum += i; // <==> sum = sum + i;
			}
			printf("sum = %d\n", sum); 
		
		while() {}
			
		示例10：
			实现同上的功能：
			int sum1 = 0;
			int j = 1;
			while(1)
			{
				sum1 += j;
				j++;
				
				if(j > 100)
				{
					printf("sum1 = %d\n", sum1); 
					break;
				}
			}
	两者的区别：
		for循环更注重循环的次数；while循环更注重循环的结束条件。


程序实现：输入某年某月某日，判断这一天是这一年的第几天？
程序分析：以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊
　　　　　　情况，闰年且输入月份大于3时需考虑多加一天。
	
	% ：取余符号
		printf("%d\n", 100 % 3); // 1

